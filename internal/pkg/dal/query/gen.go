// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q       = new(Query)
	Cart    *cart
	Comment *comment
	Coupon  *coupon
	Good    *good
	Order   *order
	User    *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Cart = &Q.Cart
	Comment = &Q.Comment
	Coupon = &Q.Coupon
	Good = &Q.Good
	Order = &Q.Order
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:      db,
		Cart:    newCart(db, opts...),
		Comment: newComment(db, opts...),
		Coupon:  newCoupon(db, opts...),
		Good:    newGood(db, opts...),
		Order:   newOrder(db, opts...),
		User:    newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Cart    cart
	Comment comment
	Coupon  coupon
	Good    good
	Order   order
	User    user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Cart:    q.Cart.clone(db),
		Comment: q.Comment.clone(db),
		Coupon:  q.Coupon.clone(db),
		Good:    q.Good.clone(db),
		Order:   q.Order.clone(db),
		User:    q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Cart:    q.Cart.replaceDB(db),
		Comment: q.Comment.replaceDB(db),
		Coupon:  q.Coupon.replaceDB(db),
		Good:    q.Good.replaceDB(db),
		Order:   q.Order.replaceDB(db),
		User:    q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Cart    ICartDo
	Comment ICommentDo
	Coupon  ICouponDo
	Good    IGoodDo
	Order   IOrderDo
	User    IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Cart:    q.Cart.WithContext(ctx),
		Comment: q.Comment.WithContext(ctx),
		Coupon:  q.Coupon.WithContext(ctx),
		Good:    q.Good.WithContext(ctx),
		Order:   q.Order.WithContext(ctx),
		User:    q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
